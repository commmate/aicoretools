name: Versioning and Publishing

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  version_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set Up Git
        run: |
          git config --global user.name "commmate"
          git config --global user.email "commmatecompany@gmail.com"

      - name: Get Current Version
        id: get_current_version
        run: |
          current_version=$(grep -oP '(?<=version = ")[^"]*' pyproject.toml)
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: Calculate Next Version
        id: calculate_next_version
        run: |
          current_version=${{ env.current_version }}
          release_type="${{ github.event.inputs.release_type }}"

          IFS='.' read -r -a version_parts <<< "${current_version}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          case $release_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid release type: $release_type"
              exit 1
              ;;
          esac

          next_version="$major.$minor.$patch"
          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: Update Version in pyproject.toml
        run: |
          next_version=${{ env.next_version }}
          sed -i "s/version = \"[^\"]*\"/version = \"$next_version\"/" pyproject.toml

      - name: Commit Changes
        run: |
          next_version=${{ env.next_version }}
          git add pyproject.toml
          git commit -m "Bump version to $next_version"

      - name: Set Up Remote with PAT
        run: |
          git remote set-url origin https://commmate:${{ secrets.PAT_TOKEN }}@github.com/commmate/aicoretools.git

      - name: Push Changes
        run: |
          git push origin main
        env:
          GH_GIT_USER: commmate
          GH_GIT_PWD: ${{ secrets.PAT_TOKEN }}

      - name: Create Version Branch
        run: |
          next_version=${{ env.next_version }}
          git checkout -b $next_version
          git push origin $next_version
        env:
          GH_GIT_USER: commmate
          GH_GIT_PWD: ${{ secrets.PAT_TOKEN }}

      - name: Update Latest Branch
        run: |
          next_version=${{ env.next_version }}
          git checkout -b latest
          git reset --hard $next_version
          git push --force origin latest
        env:
          GH_GIT_USER: commmate
          GH_GIT_PWD: ${{ secrets.PAT_TOKEN }}

      - name: Merge Version to Main
        run: |
          next_version=${{ env.next_version }}
          git checkout main
          git merge --no-ff $next_version -m "Merge version $next_version into main"
          git push origin main
        env:
          GH_GIT_USER: commmate
          GH_GIT_PWD: ${{ secrets.PAT_TOKEN }}
